/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2024-02-21 13:18:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.io.*;
import java.util.*;

public final class Register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

if ("POST".equalsIgnoreCase(request.getMethod())) {
    // Database connection parameters
    String url = "jdbc:mysql://localhost:3306/";
    String dbUsername = "root";
    String dbPassword = "expense_tracker";

    // Retrieve form data
    String username = request.getParameter("username");
    String firstName = request.getParameter("firstname");
    String lastName = request.getParameter("lastname");
    String phone = request.getParameter("phone");
    String password = request.getParameter("password");
    String confirmPassword = request.getParameter("confirm-password");

    // Validate form inputs
    if (username == null || username.trim().isEmpty() ||
        firstName == null || firstName.trim().isEmpty() ||
        lastName == null || lastName.trim().isEmpty() ||
        phone == null || phone.trim().isEmpty() ||
        password == null || password.trim().isEmpty() ||
        confirmPassword == null || confirmPassword.trim().isEmpty()) {
        // Handle empty fields
        out.println("All fields are required.");
    } else if (!password.equals(confirmPassword)) {
        // Handle password mismatch
        out.println("Passwords do not match.");
    } else if (password.length() < 8) {
        // Handle password length less than 8
        out.println("Password must be at least 8 characters long.");
    } else if (password.equalsIgnoreCase(username) || 
               password.equalsIgnoreCase(firstName) || 
               password.equalsIgnoreCase(lastName)) {
        // Handle password similarity with username, first name, or last name
        out.println("Password cannot be similar to username, first name, or last name.");
    } else {
        try {
            // Create database connection
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(url, dbUsername, dbPassword);

            // Check if username is unique
            PreparedStatement stmt = con.prepareStatement("SELECT * FROM users WHERE uname = ?");
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                // Username already exists
                out.println("Username already exists.");
            } else {
                // Check if phone number is unique
                stmt = con.prepareStatement("SELECT * FROM users WHERE phone = ?");
                stmt.setString(1, phone);
                rs = stmt.executeQuery();

                if (rs.next()) {
                    // Phone number already exists
                    out.println("Phone number already exists.");
                } else {
                    // Insert user into the database
                    stmt = con.prepareStatement("INSERT INTO users (uname, password, fname, lname, phone) VALUES (?, ?, ?, ?, ?)");
                    stmt.setString(1, username);
                    stmt.setString(2, password);
                    stmt.setString(3, firstName);
                    stmt.setString(4, lastName);
                    stmt.setString(5, phone);

                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        // Redirect to home.jsp
                        response.sendRedirect("home.jsp");
                        return;
                    } else {
                        out.println("Failed to register user.");
                    }
                }
            }

            // Close database connection
            con.close();
        } catch (Exception e) {
            out.println("An error occurred: " + e);
        }
    }
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("  <title>User Registration</title>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"style.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <div class=\"container\">\r\n");
      out.write("    <h2>User Registration</h2>\r\n");
      out.write("    <form action=\"#\" method=\"POST\">\r\n");
      out.write("      <div class=\"form-group\">\r\n");
      out.write("        <label for=\"username\">Username:</label>\r\n");
      out.write("        <input type=\"text\" id=\"username\" name=\"username\" required>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"form-group\">\r\n");
      out.write("        <label for=\"firstname\">First Name:</label>\r\n");
      out.write("        <input type=\"text\" id=\"firstname\" name=\"firstname\" required>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"form-group\">\r\n");
      out.write("        <label for=\"lastname\">Last Name:</label>\r\n");
      out.write("        <input type=\"text\" id=\"lastname\" name=\"lastname\" required>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"form-group\">\r\n");
      out.write("        <label for=\"phone\">Phone Number:</label>\r\n");
      out.write("        <input type=\"number\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{10}\" placeholder=\"Enter 10-digit phone number\" required>\r\n");
      out.write("        <small>Format: 1234567890</small>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"form-group\">\r\n");
      out.write("        <label for=\"password\">Password:</label>\r\n");
      out.write("        <input type=\"password\" id=\"password\" name=\"password\" required>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"form-group\">\r\n");
      out.write("        <label for=\"confirm-password\">Confirm Password:</label>\r\n");
      out.write("        <input type=\"password\" id=\"confirm-password\" name=\"confirm-password\" required>\r\n");
      out.write("      </div>\r\n");
      out.write("      <button type=\"submit\">Register</button>\r\n");
      out.write("    </form>\r\n");
      out.write("  </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
